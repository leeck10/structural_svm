/* ssvm_cmdline.h */

/* File autogenerated by gengetopt version 2.20  */

#ifndef SSVM_CMDLINE_H
#define SSVM_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "ssvm_tool"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "2013.7"
#endif

struct gengetopt_args_info
{
  const char *help_help; /* Print help and exit help description.  */
  const char *version_help; /* Print version and exit help description.  */
  float cost_arg;	/* set cost of SSVMs (default='1').  */
  char * cost_orig;	/* set cost of SSVMs original value given at command line.  */
  const char *cost_help; /* set cost of SSVMs help description.  */
  char * model_arg;	/* set model file name.  */
  char * model_orig;	/* set model file name original value given at command line.  */
  const char *model_help; /* set model file name help description.  */
  int binary_flag;	/* save/load model in binary format (default=off).  */
  const char *binary_help; /* save/load model in binary format help description.  */
  char * source_arg;	/* source model file for domain adaptation.  */
  char * source_orig;	/* source model file for domain adaptation original value given at command line.  */
  const char *source_help; /* source model file for domain adaptation help description.  */
  int skip_eval_flag;	/* skip test set evaluation in the middle of training (default=off).  */
  const char *skip_eval_help; /* skip test set evaluation in the middle of training help description.  */
  int owps_format_flag;	/* use One Word Per Sentence (OWPS) format (default=off).  */
  const char *owps_format_help; /* use One Word Per Sentence (OWPS) format help description.  */
  int hash_arg;	/* use hash feature and set number of predicates (default='0').  */
  char * hash_orig;	/* use hash feature and set number of predicates original value given at command line.  */
  const char *hash_help; /* use hash feature and set number of predicates help description.  */
  int support_flag;	/* use support feature (default is all feature) (default=off).  */
  const char *support_help; /* use support feature (default is all feature) help description.  */
  int general_flag;	/* general feature mode (feature:value format) (default is binary feature) (default=off).  */
  const char *general_help; /* general feature mode (feature:value format) (default is binary feature) help description.  */
  int random_arg;	/* use random_shuffle in train_data (disabled if use 0) (default='0').  */
  char * random_orig;	/* use random_shuffle in train_data (disabled if use 0) original value given at command line.  */
  const char *random_help; /* use random_shuffle in train_data (disabled if use 0) help description.  */
  int train_num_arg;	/* set number of sentence in train_data for training (for experiments) (disabled if use 0) (default='0').  */
  char * train_num_orig;	/* set number of sentence in train_data for training (for experiments) (disabled if use 0) original value given at command line.  */
  const char *train_num_help; /* set number of sentence in train_data for training (for experiments) (disabled if use 0) help description.  */
  int verbose_flag;	/* verbose mode (default=off).  */
  const char *verbose_help; /* verbose mode help description.  */
  float epsilon_arg;	/* set epsilon (fsmo, fsmo_joint) (default='0.01').  */
  char * epsilon_orig;	/* set epsilon (fsmo, fsmo_joint) original value given at command line.  */
  const char *epsilon_help; /* set epsilon (fsmo, fsmo_joint) help description.  */
  int buf_arg;	/* set the number of new constraints to accumulated before recomputing the QP (fsmo, pegasos) (default='100').  */
  char * buf_orig;	/* set the number of new constraints to accumulated before recomputing the QP (fsmo, pegasos) original value given at command line.  */
  const char *buf_help; /* set the number of new constraints to accumulated before recomputing the QP (fsmo, pegasos) help description.  */
  int rm_inactive_arg;	/* inactive constraints are removed (iteration) (fsmo, fsmo_joint) (default='50').  */
  char * rm_inactive_orig;	/* inactive constraints are removed (iteration) (fsmo, fsmo_joint) original value given at command line.  */
  const char *rm_inactive_help; /* inactive constraints are removed (iteration) (fsmo, fsmo_joint) help description.  */
  int final_opt_flag;	/* do final optimal check in shrinking (fsmo, fsmo_joint) (default=off).  */
  const char *final_opt_help; /* do final optimal check in shrinking (fsmo, fsmo_joint) help description.  */
  int comment_flag;	/* use comment info in save_slack() (fsmo) (default=off).  */
  const char *comment_help; /* use comment info in save_slack() (fsmo) help description.  */
  int iter_arg;	/* iterations for training algorithm (pegasos) (default='100').  */
  char * iter_orig;	/* iterations for training algorithm (pegasos) original value given at command line.  */
  const char *iter_help; /* iterations for training algorithm (pegasos) help description.  */
  int period_arg;	/* save model periodically (pegasos) (default='0').  */
  char * period_orig;	/* save model periodically (pegasos) original value given at command line.  */
  const char *period_help; /* save model periodically (pegasos) help description.  */
  int latent_flag;	/* use CCCP-based Latent SSVM (doesn't support sequence labeling) (default=off).  */
  const char *latent_help; /* use CCCP-based Latent SSVM (doesn't support sequence labeling) help description.  */
  int latent_SPL_flag;	/* use Self-Paced Learning for Latent SSVM (doesn't support sequence labeling) (default=off).  */
  const char *latent_SPL_help; /* use Self-Paced Learning for Latent SSVM (doesn't support sequence labeling) help description.  */
  int joint_flag;	/* use Joint model (y+z) using modified Latent SSVM   (with --y_data, --z_data, --y_cost, and --z_cost options) (default=off).  */
  const char *joint_help; /* use Joint model (y+z) using modified Latent SSVM   (with --y_data, --z_data, --y_cost, and --z_cost options) help description.  */
  int joint_SPL_flag;	/* use Joint model (y+z) using Self-Paced Learning for modified Latent SSVM (with --y_data, --z_data, --y_cost, and --z_cost options) (default=off).  */
  const char *joint_SPL_help; /* use Joint model (y+z) using Self-Paced Learning for modified Latent SSVM (with --y_data, --z_data, --y_cost, and --z_cost options) help description.  */
  char * y_data_arg;	/* set file name for y_train_data (y is visible and z is hidden).  */
  char * y_data_orig;	/* set file name for y_train_data (y is visible and z is hidden) original value given at command line.  */
  const char *y_data_help; /* set file name for y_train_data (y is visible and z is hidden) help description.  */
  char * z_data_arg;	/* set file name for z_train_data (y is hidden and z is visible).  */
  char * z_data_orig;	/* set file name for z_train_data (y is hidden and z is visible) original value given at command line.  */
  const char *z_data_help; /* set file name for z_train_data (y is hidden and z is visible) help description.  */
  float y_cost_arg;	/* set cost of y_train_data in joint model (default='1').  */
  char * y_cost_orig;	/* set cost of y_train_data in joint model original value given at command line.  */
  const char *y_cost_help; /* set cost of y_train_data in joint model help description.  */
  float z_cost_arg;	/* set cost of z_train_data in joint model (default='1').  */
  char * z_cost_orig;	/* set cost of z_train_data in joint model original value given at command line.  */
  const char *z_cost_help; /* set cost of z_train_data in joint model help description.  */
  int y_train_num_arg;	/* set number of sentences of y_train_data for training (for experiments) (disabled if use 0) (default='0').  */
  char * y_train_num_orig;	/* set number of sentences of y_train_data for training (for experiments) (disabled if use 0) original value given at command line.  */
  const char *y_train_num_help; /* set number of sentences of y_train_data for training (for experiments) (disabled if use 0) help description.  */
  int z_train_num_arg;	/* set number of sentences of y_train_data for training (for experiments) (disabled if use 0) (default='0').  */
  char * z_train_num_orig;	/* set number of sentences of y_train_data for training (for experiments) (disabled if use 0) original value given at command line.  */
  const char *z_train_num_help; /* set number of sentences of y_train_data for training (for experiments) (disabled if use 0) help description.  */
  int init_iter_arg;	/* initial iterations for Joint SSVM training algorithm (default='10').  */
  char * init_iter_orig;	/* initial iterations for Joint SSVM training algorithm original value given at command line.  */
  const char *init_iter_help; /* initial iterations for Joint SSVM training algorithm help description.  */
  char * output_arg;	/* prediction output filename.  */
  char * output_orig;	/* prediction output filename original value given at command line.  */
  const char *output_help; /* prediction output filename help description.  */
  int nbest_arg;	/* print N-best result (default='1').  */
  char * nbest_orig;	/* print N-best result original value given at command line.  */
  const char *nbest_help; /* print N-best result help description.  */
  int beam_arg;	/* set number of beam in search (disabled if use 0) (default='0').  */
  char * beam_orig;	/* set number of beam in search (disabled if use 0) original value given at command line.  */
  const char *beam_help; /* set number of beam in search (disabled if use 0) help description.  */
  float threshold_arg;	/* set threshold (convert mode) (default='1e-04').  */
  char * threshold_orig;	/* set threshold (convert mode) original value given at command line.  */
  const char *threshold_help; /* set threshold (convert mode) help description.  */
  const char *predict_help; /* prediction mode, default is training mode help description.  */
  const char *show_help; /* show-feature mode help description.  */
  const char *convert_help; /* convert mode ('txt model to bin model' or 'bin model to txt model (with -b)') and remove zero features (with --threshold option) help description.  */
  const char *convert2_help; /* convert2 mode (all_feaure model to support_feature model) and remove zero features (with --threshold option) help description.  */
  const char *convert3_help; /* convert3 mode (support_feature model to all_feature model) and remove zero features (with --threshold option) help description.  */
  char * modify_arg;	/* modify mode (modify feature weight), the option file is a list of feature weight.  */
  char * modify_orig;	/* modify mode (modify feature weight), the option file is a list of feature weight original value given at command line.  */
  const char *modify_help; /* modify mode (modify feature weight), the option file is a list of feature weight help description.  */
  const char *domain_help; /* domain adaptation (Prior model) for structural SVM (with fsmo/fsmo_joint/pegasos algorithms and source option) help description.  */
  const char *fsmo_help; /* use Fixed-threshold SMO for structural SVM (shared slack) help description.  */
  const char *fsmo_joint_help; /* use FSMO + joint constraint (1-slack) using Gram matrix help description.  */
  const char *fsmo_joint2_help; /* use FSMO + joint constraint (1-slack) without Gram matrix (slow version) help description.  */
  const char *pegasos_help; /* use Pegasos in primal optimization (random shuffled train_data) (default method) help description.  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int cost_given ;	/* Whether cost was given.  */
  int model_given ;	/* Whether model was given.  */
  int binary_given ;	/* Whether binary was given.  */
  int source_given ;	/* Whether source was given.  */
  int skip_eval_given ;	/* Whether skip_eval was given.  */
  int owps_format_given ;	/* Whether owps_format was given.  */
  int hash_given ;	/* Whether hash was given.  */
  int support_given ;	/* Whether support was given.  */
  int general_given ;	/* Whether general was given.  */
  int random_given ;	/* Whether random was given.  */
  int train_num_given ;	/* Whether train_num was given.  */
  int verbose_given ;	/* Whether verbose was given.  */
  int epsilon_given ;	/* Whether epsilon was given.  */
  int buf_given ;	/* Whether buf was given.  */
  int rm_inactive_given ;	/* Whether rm_inactive was given.  */
  int final_opt_given ;	/* Whether final_opt was given.  */
  int comment_given ;	/* Whether comment was given.  */
  int iter_given ;	/* Whether iter was given.  */
  int period_given ;	/* Whether period was given.  */
  int latent_given ;	/* Whether latent was given.  */
  int latent_SPL_given ;	/* Whether latent_SPL was given.  */
  int joint_given ;	/* Whether joint was given.  */
  int joint_SPL_given ;	/* Whether joint_SPL was given.  */
  int y_data_given ;	/* Whether y_data was given.  */
  int z_data_given ;	/* Whether z_data was given.  */
  int y_cost_given ;	/* Whether y_cost was given.  */
  int z_cost_given ;	/* Whether z_cost was given.  */
  int y_train_num_given ;	/* Whether y_train_num was given.  */
  int z_train_num_given ;	/* Whether z_train_num was given.  */
  int init_iter_given ;	/* Whether init_iter was given.  */
  int output_given ;	/* Whether output was given.  */
  int nbest_given ;	/* Whether nbest was given.  */
  int beam_given ;	/* Whether beam was given.  */
  int threshold_given ;	/* Whether threshold was given.  */
  int predict_given ;	/* Whether predict was given.  */
  int show_given ;	/* Whether show was given.  */
  int convert_given ;	/* Whether convert was given.  */
  int convert2_given ;	/* Whether convert2 was given.  */
  int convert3_given ;	/* Whether convert3 was given.  */
  int modify_given ;	/* Whether modify was given.  */
  int domain_given ;	/* Whether domain was given.  */
  int fsmo_given ;	/* Whether fsmo was given.  */
  int fsmo_joint_given ;	/* Whether fsmo_joint was given.  */
  int fsmo_joint2_given ;	/* Whether fsmo_joint2 was given.  */
  int pegasos_given ;	/* Whether pegasos was given.  */

  char **inputs ; /* unamed options */
  unsigned inputs_num ; /* unamed options number */
  int MODE_group_counter; /* counter for group MODE */
  int Parameter_Estimate_Method_for_structural_SVM_group_counter; /* counter for group Parameter_Estimate_Method_for_structural_SVM */
} ;

extern const char *gengetopt_args_info_purpose;
extern const char *gengetopt_args_info_usage;
extern const char *gengetopt_args_info_help[];

int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SSVM_CMDLINE_H */
